grammar DatadogQuery
  rule datadog_query
    (metric_alert
    {
      AS_COUNT ||= 1
      SUM_TIME_AGGR ||= 2
      ANOMALIES_ALERT ||= 4

      def calc_mask(node, result)
        if defined? node.has_count
          result |= AS_COUNT
        end
        if defined? node.has_sum_time_aggr
           result |= SUM_TIME_AGGR
        end
        if defined? node.has_anomalies_alert
           result |= ANOMALIES_ALERT
        end
        result
      end

      def find_conflicts(node)
        result = 0
        result |= calc_mask(node, result)
        if node.nonterminal?
          node.elements.map { |e| result |= find_conflicts(e) }
        end
        return result
      end

      def has_conflicts
        conflicts = find_conflicts(self)
        case conflicts
        when 1
          return ".as_count() monitors must use the 'sum'/'in total' time aggregator"
        else
          return false
        end
      end
    }
    / full_query
    {
      def has_conflicts
        false
      end
    }
    / event_alert
    {
      def has_conflicts
        false
      end
    }
    / service_check_alert
    {
      def has_conflicts
        false
      end
    }
    )
    # Although this works, it does not produce human-readable error messages
    # We therefore opt to create a Ruby class to check for conflicts
    # !{|x| x[0].has_conflicts}
  end

  rule integer
    "-"? [0-9]+
  end

  rule decimal
    "-"? [0-9]+ ("." [0-9]+)?
  end

  rule name
    [a-zA-Z0-9] [a-zA-Z0-9_.]*
  end

  rule ws
    [ \t\n]
  end

  rule qt
    "'" / '"'
  end

  rule metric_name
    name
  end

  rule scope_name
    "*" / [a-zA-Z0-9.:_!/-]+
  end

  rule scope_list
    scope_name (ws* "," ws* scope_name)*
  end

  rule scope
    '{' ws* scope_list ws* '}'
  end

  rule group_name
    [a-zA-Z0-9:_-]+
  end

  rule group
    '{' ws* group_name (ws* "," ws* group_name)* ws* '}'
  end

  rule group_by
    ws* 'by' [ \t]* group
  end

  rule arithmetic_post
    ws* arithmetic_operator ws* (full_query / decimal)
  end

  rule arithmetic_pre
    decimal+ ws* arithmetic_operator ws*
  end

  rule series
    (space_aggrs ":")? ws* metric_name ws* scope (group_by)?
  end

  rule arithmetic_operator
    "+" / "-" / "*" / "/"
  end

  rule top_convenience
    "top5" / "top10" / "top15" / "top20"
    "top5_max" / "top10_max" / "top15_max" / "top20_max"
    "top5_min" / "top10_min" / "top15_min" / "top20_min"
    "top5_last" / "top10_last" / "top15_last" / "top20_last"
    "top5_area" / "top10_area" / "top15_area" / "top20_area"
    "top5_l2norm" / "top10_l2norm" / "top15_l2norm" / "top20_l2norm"
    "bottom5" / "bottom10" / "bottom15" / "bottom20"
    "bottom5_max" / "bottom10_max" / "bottom15_max" / "bottom20_max"
    "bottom5_min" / "bottom10_min" / "bottom15_min" / "bottom20_min"
    "bottom5_last" / "bottom10_last" / "bottom15_last" / "bottom20_last"
    "bottom5_area" / "bottom10_area" / "bottom15_area" / "bottom20_area"
    "bottom5_l2norm" / "bottom10_l2norm" / "bottom15_l2norm" / "bottom20_l2norm"
  end

  rule functions
    arithmetic_functions / timeshift_functions / rate_functions /
    smoothing_functions / count_functions / regression_functions /
    beta_functions / top_convenience
  end

  rule arithmetic_functions
    "abs" / "log2" / "log10" / "cumsum" / "integral"
  end

  rule timeshift_functions
    "hour_before" / "day_before" / "week_before" / "month_before"
  end

  rule rate_functions
    "per_second" / "per_minute" / "per_hour" /
    "dt" / "diff" / "derivative" / "derived" / "rate"
  end

  rule smoothing_functions
    "ewma_3" / "ewma_5" / "ewma_10" / "ewma_20" /
    "median_3" / "median_5" / "median_7" / "median_9"
  end

  rule count_functions
    "count_nonzero" /  "count_not_null"
  end

  rule regression_functions
    "robust_trend" /  "trend_line" / "piecewise_constant"
  end

  rule beta_functions
    "fourier" /  "haar_wavelet" / "piecewise_linear" / "lowess" /
    "rollingavg_5" / "rollingavg_13" / "rollingavg_21" / "rollingavg_29"
  end

  rule top_num_series
    integer
  end

  rule top_rankings
    "max" / "min" / "last" / "l2norm" / "area"
  end

  rule top_ranking
    (qt top_rankings qt) / top_rankings
  end

  rule top_orders
    "asc" / "desc"
  end

  rule top_offset
    integer+
  end

  rule top_order
    (qt top_orders qt) / top_orders
  end

  rule top_function
    "top" '(' ws* full_query ws* ","
              ws* top_num_series ws* ","
              ws* top_ranking ws* ","
              ws* top_order ws* ')'
  end

  rule top_offset_function
    "top_offset" '(' ws* full_query ws* ","
                     ws* top_num_series ws* ","
                     ws* top_ranking ws* ","
                     ws* top_order ws* ","
                     ws* top_offset ws* ')'
  end

  rule forecast_function
    "forecast" '(' ws* full_query ws* ","
                   ws* forecast_aggr ws* ","
                   ws* seasonality ws* ","
                   ws* seasons ws* ')'
  end

  rule forecast_aggrs
    'median'
  end

  rule forecast_aggr
    (qt forecast_aggrs qt) / forecast_aggrs
  end

  rule seasonalities
    "hourly" / "daily" / "weekly"
  end

  rule seasonality
    (qt seasonalities qt) / seasonalities
  end

  rule seasons
    [3-9] / ([1-9] [0-9])+
  end

  rule anomaly_function
    "anomalies" '(' ws* full_query ws* ","
                    ws* anomaly_algorithm ws* ","
                    ws* anomaly_bounds ws* ","
                    ws* anomaly_direction ws* ')'
  end

  rule anomaly_algorithm
    qt ( "basic" / "agile" / "robust" / "adaptive" ) qt
  end

  rule anomaly_bounds
    [1-6]
  end

  rule anomaly_direction
    "direction" ws* '=' ws* qt ( "above" / "below" / "both" ) qt
  end

  rule rollup_methods
    "avg" / "max" / "min" / "sum" / "count"
  end

  rule rollup_method
    (qt rollup_methods qt) / rollup_methods
  end

  rule rollup_time
    integer
  end

  rule rollup
    "rollup" "(" ws* rollup_method ws* "," ws* rollup_time ws*  ")"
  end

  rule fill_limit
    integer
  end

  rule fill_methods
    "null" / "zero" / "linear" / "last"
  end

  rule fill_method
    (qt fill_methods qt) / fill_methods
  end

  rule fill
    "fill" "(" ws* fill_method ws* ("," fill_limit)? ")"
  end

  rule append_functions
    "as_count" "(" ")"
    {
      def has_count
        true
      end
    } /
    "as_rate" "(" ")" /
    rollup /
    fill
  end

  rule append_function
    '.' append_functions
  end

  rule function
    ( (functions '(' ws* full_query ws* ')') /
      top_function /
      top_offset_function /
      forecast_function /
      anomaly_function
      {
        def has_anomalies_alert
          true
        end
      }
    ) append_function*
  end

  rule space_aggrs
    "avg" / "max" / "min" / "sum"
  end

  rule function_series
    (arithmetic_pre)*
    (('(' query ')') / (function / series append_function*))
    (arithmetic_post)*
  end

  rule query
    (arithmetic_pre)* function_series (arithmetic_post)*
  end

  rule full_query
    query / '(' ws* full_query ws* ')'
  end

  rule time_aggrs
    "avg" / "max" / "min" /
    "sum"
    {
      def has_sum_time_aggr
        true
      end
    }
    / change_aggrs
  end

  rule time_aggr
    time_aggrs "(" ws* time_window ws* ")"
  end

  rule time_window
    "last_1m" / "last_5m" / "last_10m" / "last_15m" / "last_30m" /
    "last_1h" / "last_2h" / "last_4h" / "last_1d" / "last_2d"
  end

  rule change_aggrs
    "change" / "pct_change"
  end

  rule change_window
    "5m_ago" / "10m_ago" / "15m_ago" / "30m_ago" /
    "1h_ago" / "2h_ago" / "4h_ago" / "1d_ago" / "2d_ago"
  end

  rule alert_operator
    "<=" / ">=" / "<" / ">" / "==" / "!="
  end

  rule alert_aggr
    (change_aggrs "(" ws* time_aggr ws* ',' ws* change_window ws* ")" ) / time_aggr
  end

  rule metric_alert
    ws* alert_aggr ws* ":" ws* full_query ws* alert_operator ws* decimal ws*
  end

  # Service Check
  rule service_check_over
    ".over" "(" qt ws* scope_list ws* qt ")"
  end

  rule service_check_last
    ".last" "(" ws* integer+ ws* ")"
  end

  rule service_check_alert
    qt metric_name qt service_check_over service_check_last ".count_by_status()"
  end

  # Events
  rule event_rollup_methods
    "count"
  end

  rule event_rollup_method
    (qt event_rollup_methods qt) / event_rollup_methods
  end

  rule event_rollup
    ".rollup" "(" ws* event_rollup_method ws* ")"
  end

  rule event_last_timeframe_units
    "s" / "m" / "h" / "d"
  end

  rule event_last_timeframe_duration
    integer+ event_last_timeframe_units
  end

  rule event_last_timeframe
    (qt event_last_timeframe_duration qt) / event_last_timeframe_duration
  end

  rule event_last
    ".last" "(" ws* event_last_timeframe ws* ")"
  end

  rule event_by
    ".by" "(" qt scope_name qt ")"
  end

  rule event_query_string_sources_string
    metric_name
  end

  rule event_query_string_sources
    "sources:" event_query_string_sources_string
               ( "," event_query_string_sources_string )*
  end

  rule event_query_string_status_string
    "error" / "warning" / "info"
  end

  rule event_query_string_status
    "status:" event_query_string_status_string
              ( "," event_query_string_status_string )*
  end

  rule event_query_string_priority_string
    "low" / "normal" / "all"
  end

  rule event_query_string_priority
    "priority:" event_query_string_priority_string
                ( "," event_query_string_priority_string)*
  end

  rule event_query_string_host_string
    name
  end

  rule event_query_string_host
    "host:" name ( "," name )*
  end

  rule event_query_string_tags_string
    scope_name ("," scope_name)*
  end

  rule event_query_string_tags
    "tags:" event_query_string_tags_string
  end

  rule event_query_string_excluded_tags
    "excluded_tags:" event_query_string_tags_string
  end

  rule event_query_string_components
    event_query_string_sources /
    event_query_string_status /
    event_query_string_priority /
    event_query_string_host /
    event_query_string_tags /
    event_query_string_excluded_tags
  end

  rule event_query_string
    event_query_string_components (ws+ event_query_string_components)+
  end

  rule event_alert
    ws* "events" "(" qt ws* event_query_string ws* qt ")"
    event_by? event_rollup event_last ws* alert_operator ws* decimal ws*
  end
end
